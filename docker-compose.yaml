# docker compose version which is currently 3.8
version: '3.8'

# services : is a list of our container
services:

  # caddy:
  #     image: caddy:alpine
  #     container_name: caddy-service
  #     restart: unless-stopped
  #     ports:
  #         - 80:80
  #         - 443:443
  #     volumes:            
  #         - ./caddy_data:/data
  #         - ./caddy_config:/config
  #         - ./Caddyfile:/etc/caddy/Caddyfile

  # name is optional for our mongodb
  mymongodb:
    # since mongo is an offical image we can use it.
    image: 'mongo'

    # the port that we want to publish for mongodb
    ports:
      - '27017:27017'

    # our mongodb depends on volume to keep the data alive.
    volumes:
      - data:/data/db

    # our environment variable
    environment:
      MONGO_INITDB_ROOT_USERNAME: 'test'
      MONGO_INITDB_ROOT_PASSWORD: '12345'

    depends_on:
      - caddy

  # name is optional for our backend
  backend:
    # to build an image based on Dockerfile
    # it looks in this folder to find Dockerfile to build an image
    build: ./expressProject
    # the port that we want to publish for backend
    ports:
      - '8080:8080'

    environment:
      CONNECTION_URL: mongodb://test:12345@host.docker.internal:27017/userApp?authSource=admin&readPreference=primary
      JWT_SECRET: cAi2n6PobsdGrjgKUrvAy5a1+J3d5emcbMClTe/kEk4=
      AWS_S3_ACCESS_KEY_ID: AKIA6RBFMEAFUFWOKL6I
      AWS_S3_SECRET_ACCESS_KEY: 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
      AWS_S3_BUCKET_NAME: reactandnode

    # depends_on means it will start our backend container once mongo-container is  up and running.
    depends_on:
      - mymongodb

  # name is optional for our frontend
  frontend:
    # to build an image based on Dockerfile
    # it looks in this folder to find Dockerfile to build an image
    build: ./my-react-app

    # the port that we want to publish for frontend
    ports:
      - '3000:3000'
    # add bind mount volume to keep have updated source code
    volumes:
      - ./my-react-app/src:/app/src
    # allow interactive mode
    stdin_open: true
    tty: true

    # it will start our frontend container once backend-container is  up and running.
    depends_on:
      - backend

# declare the volumes name that our app is using.
volumes:
  data:
  # caddy_data:
  # caddy_config:
